[{"C:\\Users\\annaw\\Documents\\0000crudmui\\material-table-crud\\src\\index.js":"1","C:\\Users\\annaw\\Documents\\0000crudmui\\material-table-crud\\src\\App.js":"2"},{"size":230,"mtime":1653258946412,"results":"3","hashOfConfig":"4"},{"size":6064,"mtime":1653258946412,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sobsk1",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\annaw\\Documents\\0000crudmui\\material-table-crud\\src\\index.js",[],"C:\\Users\\annaw\\Documents\\0000crudmui\\material-table-crud\\src\\App.js",["11"],"import React, { useEffect, useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\n\r\n// regex for email validation\r\nconst validateEmail = (email) => {\r\n  const re = /^((?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [user, setUser] = useState([]);\r\n  const [iserror, setIserror] = useState(false);\r\n  const [errorMessages, setErrorMessages] = useState([]);\r\n\r\n  let columns = [\r\n    { title: 'NAME', field: 'name' },\r\n    { title: 'USERNAME', field: 'username' },\r\n    { title: 'EMAIL', field: 'email' },\r\n    { title: 'PHONE', field: 'phone' },\r\n    { title: 'WEBSITE', field: 'website' },\r\n  ]\r\n\r\n  // let data = [\r\n  //   { name: 'manish', username: 'traptrick', email: 'themk85@gmail.com', phone: '9999999999', website: 'https://github.com/traptrick' }\r\n  // ]  \r\n\r\n  useEffect(() => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\r\n      .then(res => {\r\n        const users = res.data;\r\n        setUser(users);\r\n        // console.log(users);\r\n      })\r\n  }, [])\r\n\r\n\r\n\r\n  //function for updating the existing row details\r\n  const handleRowUpdate = (newData, oldData, resolve) => {\r\n    //validating the data inputs\r\n    let errorList = []\r\n    if (newData.name === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the name field\")\r\n    }\r\n    if (newData.username === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the Username field\")\r\n    }\r\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\r\n      errorList.push(\"Oops!!! Please enter a valid email\")\r\n    }\r\n    if (newData.phone === \"\") {\r\n      errorList.push(\"Try Again, Phone number field can't be blank\")\r\n    }\r\n    if (newData.website === \"\") {\r\n      errorList.push(\"Try Again, Enter website url before submitting\")\r\n    }\r\n\r\n    if (errorList.length < 1) {\r\n      axios.put(`https://jsonplaceholder.typicode.com/users/${newData.id}`, newData)\r\n        .then(response => {\r\n          const updateUser = [...user];\r\n          const index = oldData.tableData.id;\r\n          updateUser[index] = newData;\r\n          setUser([...updateUser]);\r\n          resolve()\r\n          setIserror(false)\r\n          setErrorMessages([])\r\n        })\r\n        .catch(error => {\r\n          setErrorMessages([\"Update failed! Server error\"])\r\n          setIserror(true)\r\n          resolve()\r\n\r\n        })\r\n    } else {\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n\r\n    }\r\n  }\r\n\r\n\r\n  //function for deleting a row\r\n  const handleRowDelete = (oldData, resolve) => {\r\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${oldData.id}`)\r\n      .then(response => {\r\n        const dataDelete = [...user];\r\n        const index = oldData.tableData.id;\r\n        dataDelete.splice(index, 1);\r\n        setUser([...dataDelete]);\r\n        resolve()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Delete failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n  }\r\n\r\n\r\n  //function for adding a new row to the table\r\n  const handleRowAdd = (newData, resolve) => {\r\n    //validating the data inputs\r\n    let errorList = []\r\n    if (newData.name === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the name field\")\r\n    }\r\n    if (newData.username === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the Username field\")\r\n    }\r\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\r\n      errorList.push(\"Oops!!! Please enter a valid email\")\r\n    }\r\n    if (newData.phone === \"\") {\r\n      errorList.push(\"Try Again, Phone number field can't be blank\")\r\n    }\r\n    if (newData.website === \"\") {\r\n      errorList.push(\"Try Again, Enter website url before submitting\")\r\n    }\r\n\r\n    if (errorList.length < 1) {\r\n      axios.post(`https://jsonplaceholder.typicode.com/users`, newData)\r\n        .then(response => {\r\n          let newUserdata = [...user];\r\n          newUserdata.push(newData);\r\n          setUser(newUserdata);\r\n          resolve()\r\n          setErrorMessages([])\r\n          setIserror(false)\r\n        })\r\n        .catch(error => {\r\n          setErrorMessages([\"Cannot add data. Server error!\"])\r\n          setIserror(true)\r\n          resolve()\r\n        })\r\n    } else {\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Material Table Example Using JSONPlaceholder API</h1> <br /><br />\r\n\r\n      <MaterialTable\r\n        title=\"User Details\"\r\n        columns={columns}\r\n        data={user}\r\n        options={{\r\n          headerStyle: { borderBottomColor: 'red', borderBottomWidth: '3px', fontFamily: 'verdana' },\r\n          actionsColumnIndex: -1\r\n        }}\r\n        editable={{\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowUpdate(newData, oldData, resolve);\r\n\r\n            }),\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              handleRowAdd(newData, resolve)\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowDelete(oldData, resolve)\r\n            }),\r\n        }}\r\n      />\r\n\r\n      <div>\r\n        {iserror &&\r\n          <Alert severity=\"error\">\r\n            <AlertTitle>ERROR</AlertTitle>\r\n            {errorMessages.map((msg, i) => {\r\n              return <div key={i}>{msg}</div>\r\n            })}\r\n          </Alert>\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"12","severity":1,"message":"13","line":10,"column":14,"nodeType":"14","messageId":"15","endLine":10,"endColumn":446},"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected"]