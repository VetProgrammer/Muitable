{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annaw\\\\Documents\\\\0000crudmui\\\\material-table-crud\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport './App.css';\nimport axios from 'axios';\nimport { Alert, AlertTitle } from '@material-ui/lab'; // regex for email validation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst validateEmail = email => {\n  const re = /^((?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst App = () => {\n  _s();\n\n  const [user, setUser] = useState([]);\n  const [iserror, setIserror] = useState(false);\n  const [errorMessages, setErrorMessages] = useState([]);\n  let columns = [{\n    title: 'NAME',\n    field: 'name'\n  }, {\n    title: 'USERNAME',\n    field: 'username'\n  }, {\n    title: 'EMAIL',\n    field: 'email'\n  }, {\n    title: 'PHONE',\n    field: 'phone'\n  }, {\n    title: 'WEBSITE',\n    field: 'website'\n  }]; // let data = [\n  //   { name: 'manish', username: 'traptrick', email: 'themk85@gmail.com', phone: '9999999999', website: 'https://github.com/traptrick' }\n  // ]  \n\n  useEffect(() => {\n    axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {\n      const users = res.data;\n      setUser(users); // console.log(users);\n    });\n  }, []); //function for updating the existing row details\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validating the data inputs\n    let errorList = [];\n\n    if (newData.name === \"\") {\n      errorList.push(\"Try Again, You didn't enter the name field\");\n    }\n\n    if (newData.username === \"\") {\n      errorList.push(\"Try Again, You didn't enter the Username field\");\n    }\n\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\n      errorList.push(\"Oops!!! Please enter a valid email\");\n    }\n\n    if (newData.phone === \"\") {\n      errorList.push(\"Try Again, Phone number field can't be blank\");\n    }\n\n    if (newData.website === \"\") {\n      errorList.push(\"Try Again, Enter website url before submitting\");\n    }\n\n    if (errorList.length < 1) {\n      axios.put(`https://jsonplaceholder.typicode.com/users/${newData.id}`, newData).then(response => {\n        const updateUser = [...user];\n        const index = oldData.tableData.id;\n        updateUser[index] = newData;\n        setUser([...updateUser]);\n        resolve();\n        setIserror(false);\n        setErrorMessages([]);\n      }).catch(error => {\n        setErrorMessages([\"Update failed! Server error\"]);\n        setIserror(true);\n        resolve();\n      });\n    } else {\n      setErrorMessages(errorList);\n      setIserror(true);\n      resolve();\n    }\n  }; //function for deleting a row\n\n\n  const handleRowDelete = (oldData, resolve) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${oldData.id}`).then(response => {\n      const dataDelete = [...user];\n      const index = oldData.tableData.id;\n      dataDelete.splice(index, 1);\n      setUser([...dataDelete]);\n      resolve();\n    }).catch(error => {\n      setErrorMessages([\"Delete failed! Server error\"]);\n      setIserror(true);\n      resolve();\n    });\n  }; //function for adding a new row to the table\n\n\n  const handleRowAdd = (newData, resolve) => {\n    //validating the data inputs\n    let errorList = [];\n\n    if (newData.name === \"\") {\n      errorList.push(\"Try Again, You didn't enter the name field\");\n    }\n\n    if (newData.username === \"\") {\n      errorList.push(\"Try Again, You didn't enter the Username field\");\n    }\n\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\n      errorList.push(\"Oops!!! Please enter a valid email\");\n    }\n\n    if (newData.phone === \"\") {\n      errorList.push(\"Try Again, Phone number field can't be blank\");\n    }\n\n    if (newData.website === \"\") {\n      errorList.push(\"Try Again, Enter website url before submitting\");\n    }\n\n    if (errorList.length < 1) {\n      axios.post(`https://jsonplaceholder.typicode.com/users`, newData).then(response => {\n        let newUserdata = [...user];\n        newUserdata.push(newData);\n        setUser(newUserdata);\n        resolve();\n        setErrorMessages([]);\n        setIserror(false);\n      }).catch(error => {\n        setErrorMessages([\"Cannot add data. Server error!\"]);\n        setIserror(true);\n        resolve();\n      });\n    } else {\n      setErrorMessages(errorList);\n      setIserror(true);\n      resolve();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Material Table Example Using JSONPlaceholder API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 65\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 71\n    }, this), /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"User Details\",\n      columns: columns,\n      data: user,\n      options: {\n        headerStyle: {\n          borderBottomColor: 'red',\n          borderBottomWidth: '3px',\n          fontFamily: 'verdana'\n        },\n        actionsColumnIndex: -1\n      },\n      editable: {\n        onRowUpdate: (newData, oldData) => new Promise(resolve => {\n          handleRowUpdate(newData, oldData, resolve);\n        }),\n        onRowAdd: newData => new Promise(resolve => {\n          handleRowAdd(newData, resolve);\n        }),\n        onRowDelete: oldData => new Promise(resolve => {\n          handleRowDelete(oldData, resolve);\n        })\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: iserror && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"ERROR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), errorMessages.map((msg, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 22\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"op97+9UIQQDQKKp1OEk2oa02RZA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/annaw/Documents/0000crudmui/material-table-crud/src/App.js"],"names":["React","useEffect","useState","MaterialTable","axios","Alert","AlertTitle","validateEmail","email","re","test","String","toLowerCase","App","user","setUser","iserror","setIserror","errorMessages","setErrorMessages","columns","title","field","get","then","res","users","data","handleRowUpdate","newData","oldData","resolve","errorList","name","push","username","phone","website","length","put","id","response","updateUser","index","tableData","catch","error","handleRowDelete","delete","dataDelete","splice","handleRowAdd","post","newUserdata","headerStyle","borderBottomColor","borderBottomWidth","fontFamily","actionsColumnIndex","onRowUpdate","Promise","onRowAdd","onRowDelete","map","msg","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\n\r\n// regex for email validation\r\nconst validateEmail = (email) => {\r\n  const re = /^((?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [user, setUser] = useState([]);\r\n  const [iserror, setIserror] = useState(false);\r\n  const [errorMessages, setErrorMessages] = useState([]);\r\n\r\n  let columns = [\r\n    { title: 'NAME', field: 'name' },\r\n    { title: 'USERNAME', field: 'username' },\r\n    { title: 'EMAIL', field: 'email' },\r\n    { title: 'PHONE', field: 'phone' },\r\n    { title: 'WEBSITE', field: 'website' },\r\n  ]\r\n\r\n  // let data = [\r\n  //   { name: 'manish', username: 'traptrick', email: 'themk85@gmail.com', phone: '9999999999', website: 'https://github.com/traptrick' }\r\n  // ]  \r\n\r\n  useEffect(() => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\r\n      .then(res => {\r\n        const users = res.data;\r\n        setUser(users);\r\n        // console.log(users);\r\n      })\r\n  }, [])\r\n\r\n\r\n\r\n  //function for updating the existing row details\r\n  const handleRowUpdate = (newData, oldData, resolve) => {\r\n    //validating the data inputs\r\n    let errorList = []\r\n    if (newData.name === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the name field\")\r\n    }\r\n    if (newData.username === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the Username field\")\r\n    }\r\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\r\n      errorList.push(\"Oops!!! Please enter a valid email\")\r\n    }\r\n    if (newData.phone === \"\") {\r\n      errorList.push(\"Try Again, Phone number field can't be blank\")\r\n    }\r\n    if (newData.website === \"\") {\r\n      errorList.push(\"Try Again, Enter website url before submitting\")\r\n    }\r\n\r\n    if (errorList.length < 1) {\r\n      axios.put(`https://jsonplaceholder.typicode.com/users/${newData.id}`, newData)\r\n        .then(response => {\r\n          const updateUser = [...user];\r\n          const index = oldData.tableData.id;\r\n          updateUser[index] = newData;\r\n          setUser([...updateUser]);\r\n          resolve()\r\n          setIserror(false)\r\n          setErrorMessages([])\r\n        })\r\n        .catch(error => {\r\n          setErrorMessages([\"Update failed! Server error\"])\r\n          setIserror(true)\r\n          resolve()\r\n\r\n        })\r\n    } else {\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n\r\n    }\r\n  }\r\n\r\n\r\n  //function for deleting a row\r\n  const handleRowDelete = (oldData, resolve) => {\r\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${oldData.id}`)\r\n      .then(response => {\r\n        const dataDelete = [...user];\r\n        const index = oldData.tableData.id;\r\n        dataDelete.splice(index, 1);\r\n        setUser([...dataDelete]);\r\n        resolve()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessages([\"Delete failed! Server error\"])\r\n        setIserror(true)\r\n        resolve()\r\n      })\r\n  }\r\n\r\n\r\n  //function for adding a new row to the table\r\n  const handleRowAdd = (newData, resolve) => {\r\n    //validating the data inputs\r\n    let errorList = []\r\n    if (newData.name === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the name field\")\r\n    }\r\n    if (newData.username === \"\") {\r\n      errorList.push(\"Try Again, You didn't enter the Username field\")\r\n    }\r\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\r\n      errorList.push(\"Oops!!! Please enter a valid email\")\r\n    }\r\n    if (newData.phone === \"\") {\r\n      errorList.push(\"Try Again, Phone number field can't be blank\")\r\n    }\r\n    if (newData.website === \"\") {\r\n      errorList.push(\"Try Again, Enter website url before submitting\")\r\n    }\r\n\r\n    if (errorList.length < 1) {\r\n      axios.post(`https://jsonplaceholder.typicode.com/users`, newData)\r\n        .then(response => {\r\n          let newUserdata = [...user];\r\n          newUserdata.push(newData);\r\n          setUser(newUserdata);\r\n          resolve()\r\n          setErrorMessages([])\r\n          setIserror(false)\r\n        })\r\n        .catch(error => {\r\n          setErrorMessages([\"Cannot add data. Server error!\"])\r\n          setIserror(true)\r\n          resolve()\r\n        })\r\n    } else {\r\n      setErrorMessages(errorList)\r\n      setIserror(true)\r\n      resolve()\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Material Table Example Using JSONPlaceholder API</h1> <br /><br />\r\n\r\n      <MaterialTable\r\n        title=\"User Details\"\r\n        columns={columns}\r\n        data={user}\r\n        options={{\r\n          headerStyle: { borderBottomColor: 'red', borderBottomWidth: '3px', fontFamily: 'verdana' },\r\n          actionsColumnIndex: -1\r\n        }}\r\n        editable={{\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowUpdate(newData, oldData, resolve);\r\n\r\n            }),\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              handleRowAdd(newData, resolve)\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              handleRowDelete(oldData, resolve)\r\n            }),\r\n        }}\r\n      />\r\n\r\n      <div>\r\n        {iserror &&\r\n          <Alert severity=\"error\">\r\n            <AlertTitle>ERROR</AlertTitle>\r\n            {errorMessages.map((msg, i) => {\r\n              return <div key={i}>{msg}</div>\r\n            })}\r\n          </Alert>\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}